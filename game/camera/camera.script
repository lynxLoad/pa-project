
local game_events = require("management.game_events")
local global = require("management.global")

local BASE_WIDTH = sys.get_config_int("display.width")
local BASE_HEIGHT = sys.get_config_int("display.height")

local ZOOM_FACTOR = 1.1
local BASE_MAX_ZOOM = 10
local BASE_MIN_ZOOM = 2
local zoom

local camera_path = "#camera"

local function update_camera(width, height)
	local scale = math.min(width / BASE_WIDTH, height / BASE_HEIGHT)
	local current_min_zoom = BASE_MIN_ZOOM * scale
	local current_max_zoom = BASE_MAX_ZOOM * scale
	zoom = math.clamp(zoom, BASE_MIN_ZOOM, BASE_MAX_ZOOM)
	go.set(camera_path, "orthographic_zoom", zoom * scale)
end

function init(self)
	global.screen_to_world(1, 1, 1, camera.get_projection("#camera"), camera.get_view("#camera"))
	zoom = camera.get_orthographic_zoom(camera_path)
	msg.post(".", "acquire_input_focus")
	game_events.window_resized:subscribe(update_camera)
end

function on_input(self, action_id, action)
	local mouse_wheel_up = action_id == hash("mouse_wheel_up")
	local mouse_wheel_down = action_id == hash("mouse_wheel_down")
	local drag_input = action_id == hash("mouse_button_middle") or action_id == hash("key_lctrl")

	if action.x == 0 and action.y == 0 then
		return
	end
	
	if drag_input and action.pressed then
		self.start_cam_pos = go.get_position(go.get_id("/camera"))
		self.start_mouse_pos = vmath.vector3(action.x, action.y, 0)
		
		self.is_drag_cam = true
	end

	if self.is_drag_cam then
		local current_mouse_pos = vmath.vector3(action.x, action.y, 0)

		local start_world = global.screen_to_world(
			self.start_mouse_pos.x, 
			self.start_mouse_pos.y, 
			0,
			camera.get_projection(camera_path),
			camera.get_view(camera_path)
		)

		local current_world = global.screen_to_world(
			current_mouse_pos.x, 
			current_mouse_pos.y, 
			0, 
			camera.get_projection(camera_path), 
			camera.get_view(camera_path)
		)

		local delta = current_world - start_world
		local new_pos = self.start_cam_pos - delta 
		go.set_position(new_pos, go.get_id("/camera"))
	end

	if drag_input and action.released then
		self.is_drag_cam = false
	end
	
	if mouse_wheel_up or mouse_wheel_down then
		local next_zoom = zoom
		if mouse_wheel_up then
			next_zoom = next_zoom * ZOOM_FACTOR
		elseif mouse_wheel_down then
			next_zoom = next_zoom / ZOOM_FACTOR
		end

		local width, height = window.get_size()
		local scale = math.min(width / BASE_WIDTH, height / BASE_HEIGHT)
		local current_min_zoom = BASE_MIN_ZOOM * scale
		local current_max_zoom = BASE_MAX_ZOOM * scale
		next_zoom = math.clamp(next_zoom, BASE_MIN_ZOOM, BASE_MAX_ZOOM)

		go.animate(camera_path, "orthographic_zoom", go.PLAYBACK_ONCE_FORWARD, next_zoom * scale, go.EASING_OUTQUAD, 0.05)
		zoom = next_zoom
	end
end