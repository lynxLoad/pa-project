-- instancer.script
local mloader = require("bridge.mloader")
local instance_config = require("game.instancer.instance_config")

-- Создаем wrapper для каждого экземпляра pawn
local spawners = {}
local wrapper = {
	hooks = {
		init = {},
		final = {},
		update = {},
		fixed_update = {},
		on_message = {},
		on_input = {},
		on_reload = {}
	},
	register_hook = function(self, event, callback)
		table.insert(self.hooks[event], callback)
	end,
	call_hooks = function(self, event, ...)
		if not self.hooks[event] then
			print("Warning: No hooks registered for " .. tostring(event))
			return
		end
		for _, callback in ipairs(self.hooks[event] or {}) do
			local ok, err = pcall(callback, ...)
			if not ok then
				error("Error in hook for " .. event .. ": " .. tostring(err))
			end
		end
	end
}

function init(self)
	for k, v in pairs(instance_config) do
		table.insert(spawners, mloader.mload(v.path))
	end
	
	for _, v in pairs(spawners) do
		v._wrapper = wrapper

		if v.init then
			v.init(self)
		end

		if v.register_hooks then
			v.register_hooks(v._wrapper)
		end

		v._wrapper:call_hooks("init", self)
	end
end

function final(self)
	for _, v in pairs(spawners) do
		if v.final then
			v.final(self)
		end
		v._wrapper:call_hooks("final", self)
	end
end

function update(self, dt)
	for _, v in pairs(spawners) do
		if v.update then
			v.update(self, dt)
		end
		v._wrapper:call_hooks("update", self, dt)
	end
end

function fixed_update(self, dt)
	for _, v in pairs(spawners) do
		if v.fixed_update then
			v.fixed_update(self, dt)
		end
		v._wrapper:call_hooks("fixed_update", self, dt)
	end
end

function on_message(self, message_id, message, sender)
	for _, v in pairs(spawners) do
		if v.on_message then
			v.on_message(self, message_id, message, sender)
		end
		v._wrapper:call_hooks("on_message", self, message_id, message, sender)
	end
end

function on_input(self, action_id, action)
	for _, v in pairs(spawners) do
		if v.on_input then
			v.on_input(self, action_id, action)
		end
		v._wrapper:call_hooks("on_input", self, action_id, action)
	end
end

function on_reload(self)
	for _, v in pairs(spawners) do
		if v.on_reload then
			v.on_reload(self)
		end
		v._wrapper:call_hooks("on_reload", self)
	end
end
